{
  "name": "cd",
  "on": {
    "workflow_dispatch": null
  },
  "concurrency": {
    "group": "${{ github.workflow }}-${{ github.ref }}",
  },
  "permissions": {
    "contents": "read",
    "pages": "write",
    "id-token": "write"
  },
  "jobs": {
    "changes": {
      "runs-on": "ubuntu-latest",
      "steps": [
        { "uses": "actions/checkout@v4" },
        {
          "id": "enumerate",
          "run": "echo PACKAGES=\"$(git ls-files */package.json */*/package.json --exclude=.* --exclude=**/node_modules/* | jq --compact-output --raw-input --slurp 'split(\"\\n\")[:-1] | map(sub(\"/package.json$\"; \"\")) | reduce .[] as $key ({}; .[$key] = \"\\($key)/**\")')\" >> $GITHUB_OUTPUT"
        },
        {
          "id": "base",
          "run": "RUN_ID=$(gh run list --workflow=cd.yml --branch=main --json databaseId,status,headSha,conclusion --jq '[.[] | select(.status == \"completed\" and .conclusion == \"success\")][0].headSha'); echo \"BASE_SHA=$RUN_ID\" >> $GITHUB_OUTPUT",
          "env": {
            "GH_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          }
        },
        {
          "if": "steps.enumerate.outputs.PACKAGES != '{}'",
          "uses": "dorny/paths-filter@v3",
          "id": "filter",
          "with": {
            #"base": "${{ steps.base.outputs.BASE_SHA }}",
            #"ref": "${{ github.sha }}",
            "filters": "${{ steps.enumerate.outputs.PACKAGES }}"
          }
        }
      ],
      "outputs": {
        "packages": "${{ steps.filter.outputs.changes }}"
      },
      "timeout-minutes": 15
    },
    "release": {
      "if": "needs.changes.outputs.packages != '' && needs.changes.outputs.packages != '[]'",
      "runs-on": "ubuntu-latest",
      "needs": ["changes"],
      "strategy": {
        "fail-fast": false,
        "matrix": {
          "package": "${{ fromJSON(needs.changes.outputs.packages) }}"
        }
      },
      "steps": [
        { "uses": "actions/checkout@v4" },
        { "uses": "actions/setup-node@v4", "with": { "node-version": 22 } },
        { "run": "npm install" }, #{ "uses": "bahmutov/npm-install@v1", "with": { "useLockFile": false } },
        {
          "working-directory": "${{ matrix.package }}",
          "run": "npm run build --if-present"
        },

        {
          "env": {
            "GH_TOKEN": "${{ secrets.PAT }}"
          },
          "run": "for TAG in $(gh release list --json tagName,isDraft --jq '.[] | select(.isDraft) | .tagName'); do gh release delete -y \"$TAG\"; done"
        },

        {
          "id": "tag",
          "env": {
            "GH_TOKEN": "${{ secrets.PAT }}"
          },
          "run": "PACKAGE=\"${{ matrix.package }}\"; VERSION=\"0.0.0\"; [[ -f docs/$PACKAGE@latest.tgz ]] && VERSION=$(tar -xOzf docs/$PACKAGE@latest.tgz ./package.json | jq --raw-output '.version // \"0.0.0\"'); PACKAGE_VERSION=$(jq --raw-output '.version // empty' \"$PACKAGE/package.json\"); [[ -n \"$PACKAGE_VERSION\" ]] && VERSION=\"$PACKAGE_VERSION\"; RELEASE_VERSION=$(gh release list --limit 100 --json tagName --jq \"[.[] | select(.tagName | startswith(\\\"$PACKAGE@\\\")) | .tagName | sub(\\\"$PACKAGE@\\\"; \\\"\\\") | split(\\\".\\\") | map(tonumber)] | sort | last | if . == null or . == \\\"\\\" then \\\"0.0.0\\\" else map(tostring) | join(\\\".\\\") end\"); [[ -n \"$RELEASE_VERSION\" ]] && npx -y semver \"$RELEASE_VERSION\" -r \">$VERSION\" > /dev/null && VERSION=\"$RELEASE_VERSION\"; echo \"TAG_NAME=$PACKAGE@$(npx -y semver \\\"$VERSION\\\" -i minor)\" >> \"$GITHUB_OUTPUT\""
        },
        {
          "uses": "softprops/action-gh-release@v2",
          "with": {
            "draft": true,
            "tag_name": "${{ steps.tag.outputs.TAG_NAME }}",
            "token": "${{ secrets.PAT }}"
          }
        }
      ],
      "timeout-minutes": 15
    },
    "publish": {
      "runs-on": "ubuntu-latest",
      "needs": ["changes", "release"],
      "steps": [
        { "uses": "actions/checkout@v4" },
        { "uses": "actions/setup-node@v4", "with": { "node-version": 22 } },

        {
          "env": {
            "GH_TOKEN": "${{ secrets.PAT }}"
          },
          "run": "gh run download --name github-pages; tar -xvf artifact.tar --keep-old-files --directory docs/ || true"
        },

        { "run": "npm install" }, #{ "uses": "bahmutov/npm-install@v1", "with": { "useLockFile": false } },

        {
          "env": {
            "GH_TOKEN": "${{ secrets.PAT }}"
          },
          "run": "for PACKAGE in $(jq --raw-output '.[]' <<< '[\"components/monaco-vscode-api\",\"util\"]'); do TAG_NAME=$(jq --raw-output 'select(.version != null and .version != \"\") | \"\\(.name)@\\(.version)\"' \"$PACKAGE/package.json\" || true); if [[ -z \"$TAG_NAME\" ]] || gh release list --json tagName --jq '.[].tagName' | grep -qx \"$TAG_NAME\"; then BASE_VERSION=$(gh release list --json tagName --jq \"([.[] | select(.tagName | startswith(\\\"$PACKAGE@\\\")) | .tagName | sub(\\\"$PACKAGE@\\\"; \\\"\\\") | select(length > 0) | split(\\\".\\\") | map(tonumber)] | sort | last | if . == null then \\\"0.1.0\\\" else (map(tostring) | join(\\\".\\\")) end)\"); TAG_NAME=$PACKAGE@$BASE_VERSION; fi; ARCHIVE=docs/${TAG_NAME}.tgz; echo \"üì¶ Publishing $PACKAGE as $TAG_NAME\"; if npm run publish; then [[ -f \"$ARCHIVE\" ]] || { echo \"‚ùå Archive $ARCHIVE not found\"; exit 1; }; echo \"‚úÖ Marking release $TAG_NAME as published\"; gh release edit \"$TAG_NAME\" --draft=false; else echo \"‚ùå Failed to publish $PACKAGE\"; gh release delete \"$TAG_NAME\" --yes || true; git push origin \":refs/tags/$TAG_NAME\" || true; exit 1; fi; done"
        },

        {
          "uses": "actions/upload-pages-artifact@v3",
          "with": {
            "path": "./docs"
          }
        }
      ],
      "timeout-minutes": 15
    },
    "deploy": {
      "runs-on": "ubuntu-latest",
      "environment": {
        "name": "github-pages",
        "url": "${{ steps.deployment.outputs.page_url }}"
      },
      "needs": ["publish"],
      "steps": [
        { "uses": "actions/deploy-pages@v4" }
      ],
      "timeout-minutes": 15
    }
  }
}
